var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DSForces","category":"page"},{"location":"#DSForces","page":"Home","title":"DSForces","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DSForces, a Julia package to computed double stranded (DS) forces in nucleic-acid sequences.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is not registered. Install with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(url=\"https://github.com/adigioacchino/DSForces.jl\")","category":"page"},{"location":"#DS-force-definition","page":"Home","title":"DS force definition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TBW (with the citation to the paper/bioRxiv).","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Force-computation-for-a-given-sequence","page":"Home","title":"Force computation for a given sequence","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The only exported function is ComputeDSForce, that can be used to compute the DS force of any sequence,  for instance the block","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DSForces\nseq = \"ACAACGTAACGGTCGAGTCG\"\nComputeDSForce(seq)","category":"page"},{"location":"","page":"Home","title":"Home","text":"will return a single Float64 value that is the DS force associated to the sequence. If the ranges of the two complementary (including Wobble pairs) sequences are needed, the parameter return_LCS_positions must be set to true: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DSForces\nseq = \"ACAACGTAACGGTCGAGTCG\"\nComputeDSForce(seq, return_LCS_positions=true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The option return_LCS_positions will be used in all examples above, but can always be dropped if the positions of the complementary sequences are not of interest.","category":"page"},{"location":"#Force-computation-with-constrained-positions","page":"Home","title":"Force computation with constrained positions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sometimes it can be useful to compute the DS force under the condition that one of the two subsequences  forming the DS segment is in a given range. This can be done with the argument `` such as in the following example","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DSForces\nseq = \"ACAACGTAACGGTCGAGTCG\"\nComputeDSForce(seq, return_LCS_positions=true, seqA_range=1:10)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here we are restricting the position of one of the two subsequences to the range 1:10, and this  changes the length of the longest complementary segment (now 2, compare with 3 in the unrestricted case),  as well as the value of the DS force.  Notice that a different equation is used to compute the DS force from the length of the longest DS segment if seqA_range is specified, to account for the new constraint.","category":"page"},{"location":"#Force-computation-with-sliding-windows","page":"Home","title":"Force computation with sliding windows","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For very long sequences it could be interesting to compute the DS force for a window of fixed lenght that slides along the sequence.  The following code block demonstrates the usage of the argument sliding_window_length that allows for this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DSForces\npre_seq = \"ACAACGTAACGGTCGAGTCG\"\nseq = pre_seq^2\nComputeDSForce(seq, return_LCS_positions=true, sliding_window_length=length(pre_seq))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here the length of the sliding window is the length of pre_seq, which is identical to the examples above. Therefore the first element of the 3 vectors that the function outputs will be identical to the output of the  second example in section Force computation for a given sequence, and all other values of these vectors  will be the same quantities computed for the other sliding windows of the same length along the sequence.  Notice that the stride is fixed to 1.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DSForces]","category":"page"},{"location":"#DSForces.CompSegmLenToDSForce","page":"Home","title":"DSForces.CompSegmLenToDSForce","text":"CompSegmLenToDSForce(CSL::Int, alpha::AbstractFloat, seqlen::Int, \n                          seqlen_forced::Union{Int, Missing}=seqlen, c0::AbstractFloat=-2.2)\n\nGiven the length of the longest complementary segmenet CSL, the value of the probability alpha that two randomly chosen nucleotide in the sequence under analysis form an  allowed pair, and the length of the sequence under analysis lenseq, it computes the DS force. The value of the parameter c0 has been fixed by synthetic tests, see the accompanying paper. If one of the two complementary sequences is forced to be within an interval (whose length is  seqlen_forced), the DS force computation is adapted to this case. \n\n\n\n\n\n","category":"function"},{"location":"#DSForces.ComputeAlpha-Tuple{Union{BioSequences.LongSubSeq{BioSequences.DNAAlphabet{4}}, BioSequences.LongDNA{4}, BioSequences.LongNuc{4, BioSequences.DNAAlphabet{4}}}}","page":"Home","title":"DSForces.ComputeAlpha","text":"ComputeAlpha(seq::Union{LongDNA{4}, LongSubSeq{DNAAlphabet{4}}})\n\nCompute the probability (\"α\") that two randomly chosen nucleotide in seq form an  allowed pair (defined by the global variable allowed_pairs).\n\n\n\n\n\n","category":"method"},{"location":"#DSForces.ComputeDSForce-Tuple{Union{BioSequences.LongSubSeq{BioSequences.DNAAlphabet{4}}, AbstractString, BioSequences.LongDNA{4}, BioSequences.LongNuc{4, BioSequences.DNAAlphabet{4}}}}","page":"Home","title":"DSForces.ComputeDSForce","text":"ComputeDSForce(\n        seq::Union{AbstractString, LongDNA{4}, LongSubSeq{DNAAlphabet{4}}};\n        return_LCS_positions::Bool=false, \n        sliding_window_length::Union{Int, Missing}=missing,\n        seqA_range::Union{UnitRange{Int}, Missing}=missing)\n\nGiven the sequence seq, compute its DS force. If return_LCS_positions, the positions of the subsequences forming the  longest double-strand segment are returned. If sliding_window_length is provided, the DS force computation is done for  sliding windows of that length, with stride 1. If a range is specified as seqA_range, one of the two fully complementary  is forced to be within the provided range.\n\nWARNGING: specifying a seqA_range has no effect if also a  sliding_window_length is provided.\n\n\n\n\n\n","category":"method"},{"location":"#DSForces.FindLongestComplementarySegment","page":"Home","title":"DSForces.FindLongestComplementarySegment","text":"FindLongestComplementarySegment(seq::Union{LongDNA{4}, LongSubSeq{DNAAlphabet{4}}}, \n                                     return_coords::Bool=false)\n\nFind the two subsequences of seq that can  form the longest possible double-strand segement (including Watson-Crick and Wobble pairs). If return_coords the ranges encompassing the two 'complementary' sequences are returned, otherwise only the length of the segment is returned. When different ranges are possible, those closest to the end of the sequence (\"downstream\")  are chosen. \n\n\n\n\n\n","category":"function"},{"location":"#DSForces.FindLongestComplementarySegment-2","page":"Home","title":"DSForces.FindLongestComplementarySegment","text":"FindLongestComplementarySegment(seq::Union{LongDNA{4}, LongSubSeq{DNAAlphabet{4}}}, \n                                     seqA_range::UnitRange{Int}, return_coords::Bool=false)\n\nFind the longest subsequence of seq that is within seqA_range and can form a double-strand  segement (including Watson-Crick and Wobble pairs) with another subsequence of seq. If return_coords the ranges encompassing the two 'complementary' sequences are returned, otherwise only the length of the segment is returned.\n\n\n\n\n\n","category":"function"},{"location":"#DSForces.FindLongestComplementarySegmentLast-Tuple{Union{BioSequences.LongSubSeq{BioSequences.DNAAlphabet{4}}, BioSequences.LongDNA{4}, BioSequences.LongNuc{4, BioSequences.DNAAlphabet{4}}}}","page":"Home","title":"DSForces.FindLongestComplementarySegmentLast","text":"FindLongestComplementarySegmentLast(seq::Union{LongDNA{4}, LongSubSeq{DNAAlphabet{4}}})\n\nFind the longest subsequence of seq that ends at the end of seq and can form a double-strand  segement (including Watson-Crick and Wobble pairs) with another subsequence of seq, and return the coordinates of these two subsequences. NOTE: This function is only used to speed up the sliding computation of DS forces.\n\n\n\n\n\n","category":"method"},{"location":"#DSForces.FindLongestComplementarySegmentSliding","page":"Home","title":"DSForces.FindLongestComplementarySegmentSliding","text":"FindLongestComplementarySegmentSliding(seq::LongDNA{4}, \nsliding_window_length::Int=min(length(seq), 3000))\n\nDoes the same as FindLongestComplementarySegment on sliding windows of length sliding_window_length and with stride 1. It returns four vectors, each with one  value for each sliding window:  1, the lengths of the longest complementary segment;  2, the values of α (see ComputeAlpha);  3, the position of the upstream complementary subsequence; 4, the position of the downstream complementary subsequence.\n\n\n\n\n\n","category":"function"}]
}
